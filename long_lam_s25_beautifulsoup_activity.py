# -*- coding: utf-8 -*-
"""Long Lam - S25: BeautifulSoup Activity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YxxpprZvKC0pxrDS7ApfdPXLWxoZJMXY
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

from urllib.request import urlopen
import bs4
from bs4 import BeautifulSoup

url = "http://www.hubertiming.com/results/2017GPTR10K"
html = urlopen(url)

soup = BeautifulSoup(html, 'lxml')
type(soup)

# Get the title
title = soup.title
print(title)

# Print out the text
text = soup.get_text()
print(soup.text)

# Extract all the <a> HTML tags from the webpage
soup.find_all('a')

# Extract and print out all hyperlinks (hrefs)
all_links = soup.find_all("a")
for link in all_links:
  print(link.get("href"))

# Print the first 10 rows
rows = soup.find_all('tr')
print(rows[:10])

for row in rows:
  row_td = row.find_all('td')
print(row_td)
type(row_td)

# Remove the HTML tags
str_cells = str(row_td)
cleantext = BeautifulSoup(str_cells, "lxml").get_text()
print(cleantext)

# Remove HTML tags from string and add to a list
import re

list_rows = []
for row in rows:
    cells = row.find_all('td')
    str_cells = str(cells)
    clean = re.compile('<.*?>')
    clean2 = (re.sub(clean, '',str_cells))
    list_rows.append(clean2)
print(clean2)
type(clean2)

# Convert list into a pandas dataframe and grab the first 10 rows of data
df = pd.DataFrame(list_rows)
df.head(10)

# Split the 0 column into multiple columns
df1 = df[0].str.split(',', expand=True)
df1.head(10)

# Remove just the opening bracket with strip() method
df1[0] = df1[0].str.strip('[')
df1.head(10)

# Grab the table headers
col_labels = soup.find_all('th')

# Use BeautifulSoup to extract text in between html tags for table headers
all_header = []
col_str = str(col_labels)
cleantext2 = BeautifulSoup(col_str, 'lxml').get_text()
all_header.append(cleantext2)
print(all_header)

# Convert table headers to a new pandas dataframe
df2 = pd.DataFrame(all_header)
df2.head()

# Split column 0 into multiple columns again
df3 = df2[0].str.split(',', expand=True)
df3.head()

# Concatenate the two dataframes
frames = [df3, df1]
df4 = pd.concat(frames)
df4.head(10)

# Use the first row as the table header
df5 = df4.rename(columns=df4.iloc[0])
df5.head()

# Get an overview of the data
df5.info()
df5.shape

# Drop all rows with missing values
df6 = df5.dropna(axis=0, how='any')
df6.info()
df6.shape

df7 = df6.drop(df6.index[0])
df7.head()

df7.rename(columns={'[Place': 'Place'},inplace=True)
df7.rename(columns={' Team]': 'Team'},inplace=True)
df7.head()

df7['Team'] = df7['Team'].str.strip(']')
df7.head()

# Convert gun time to strictly minutes
time_list = df7[' Gun Time'].tolist()

time_mins = []
for i in time_list:
  if len(i.split(':')) == 3:
    h, m, s = i.split(':')
    math = (int(h) * 3600 + int(m) * 60 + int(s))/60
    time_mins.append(math)
  if len(i.split(':')) == 2:
    m, s = i.split(':')
    math = (int(m) * 60 + int(s))/60
    time_mins.append(math)
print(time_mins)

# Creates a new numeric column containing the time_mins data
df7['Runner_mins'] = time_mins
df7.head()

# np.number requires a numeric column to work
df7.describe(include=[np.number])

# Create a boxplot to visualize the summary statistics
from pylab import rcParams
rcParams['figure.figsize'] = 15,5

df7.boxplot(column='Runner_mins')
plt.grid(True, axis='y')
plt.ylabel('Chip Time')
plt.xticks([1], ['Runners'])
plt.show()

# Plot the runner chip times with the seaborn python plotting library (histplot)
x = df7['Runner_mins']
sns.set_theme()
sns.histplot(x, kde=True,color='magenta',bins=25,kde_kws=dict(cut=3),stat="density",edgecolor='black')
plt.xlabel("Runner_mins")
plt.ylabel("")
plt.show()

# Question 3: Were there any performance differences between males and females of various age groups?
# To explore this question, plot separate distributions of times for males and females.
f_fuko = df7.loc[df7[' Gender']==' F']['Runner_mins']
m_fuko = df7.loc[df7[' Gender']==' M']['Runner_mins']

# Histogram only for Female
sns.histplot(f_fuko,stat='density', edgecolor='black', label='Female')

# KDE line for Female
sns.kdeplot(f_fuko, label='Female KDE', color='C0')

# KDE line only for Male
sns.kdeplot(m_fuko, label='Male KDE', color='C1')

# Modify the step size for the y axis, and clear y axis label
plt.yticks(np.arange(0, 0.040, 0.005))
plt.ylabel('')

# Displays the legend for the graph
plt.legend()

# Compute summary statistics for males and females separately using the pandas groupby() method
g_stats = df7.groupby(" Gender", as_index=True).describe()
print(g_stats)

# Display a side-by-side boxplot comparison of male and female finish times
df7.boxplot(column='Runner_mins', by=' Gender')
plt.ylabel('Chip Time')
plt.suptitle("")